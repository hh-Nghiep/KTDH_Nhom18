/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Project;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;

/**
 *
 * @author admin
 */
public class Project extends javax.swing.JFrame{

    private Graphics g3D;
    private int step = 40; // Ti le: 1 don vi = 40 pixel 
    private int height; // Chieu cao cua Panel
    private int width; // Chieu dai cua Panel
    
    
    public Project() {
        initComponents();
        this.setLocationRelativeTo(null);
        height = panel3D.getBounds().height;
        width = panel3D.getBounds().width;
        
        g3D = panel3D.getGraphics();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        panel3D = new javax.swing.JPanel();
        dai_Lbl = new javax.swing.JLabel();
        rong_Lbl = new javax.swing.JLabel();
        veHHCN_Btn = new javax.swing.JButton();
        dai_TF = new javax.swing.JTextField();
        rong_TF = new javax.swing.JTextField();
        cao_Lbl = new javax.swing.JLabel();
        cao_TF = new javax.swing.JTextField();
        xoaManHinh_Btn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel3D.setBackground(new java.awt.Color(255, 255, 255));
        panel3D.setPreferredSize(new java.awt.Dimension(900, 300));
        panel3D.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                panel3DAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout panel3DLayout = new javax.swing.GroupLayout(panel3D);
        panel3D.setLayout(panel3DLayout);
        panel3DLayout.setHorizontalGroup(
            panel3DLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 960, Short.MAX_VALUE)
        );
        panel3DLayout.setVerticalGroup(
            panel3DLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
        );

        dai_Lbl.setText("Dài");

        rong_Lbl.setText("Rộng");

        veHHCN_Btn.setText("Vẽ hình hộp chữ nhật");
        veHHCN_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                veHHCN_BtnActionPerformed(evt);
            }
        });

        cao_Lbl.setText("Cao");

        xoaManHinh_Btn.setText("Xóa màn hình");
        xoaManHinh_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xoaManHinh_BtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(dai_Lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rong_Lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(veHHCN_Btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dai_TF))
                    .addComponent(rong_TF)
                    .addComponent(cao_Lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cao_TF)
                    .addComponent(xoaManHinh_Btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel3D, javax.swing.GroupLayout.PREFERRED_SIZE, 960, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(dai_Lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dai_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rong_Lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rong_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cao_Lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cao_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(veHHCN_Btn)
                        .addGap(356, 356, 356)
                        .addComponent(xoaManHinh_Btn))
                    .addComponent(panel3D, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("3D", jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1138, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("2D", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1143, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void panel3DAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_panel3DAncestorAdded
        draw3DCoordinate();
        //drawGrid();
    }//GEN-LAST:event_panel3DAncestorAdded

    private void veHHCN_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_veHHCN_BtnActionPerformed
        drawRectangular();
    }//GEN-LAST:event_veHHCN_BtnActionPerformed

    private void xoaManHinh_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xoaManHinh_BtnActionPerformed
        clear();
    }//GEN-LAST:event_xoaManHinh_BtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Project.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Project.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Project.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Project.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Project().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cao_Lbl;
    private javax.swing.JTextField cao_TF;
    private javax.swing.JLabel dai_Lbl;
    private javax.swing.JTextField dai_TF;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel panel3D;
    private javax.swing.JLabel rong_Lbl;
    private javax.swing.JTextField rong_TF;
    private javax.swing.JButton veHHCN_Btn;
    private javax.swing.JButton xoaManHinh_Btn;
    // End of variables declaration//GEN-END:variables

    public void clear()
    {
        g3D.clearRect(0, 0, width, height);
//        panel3D.setBackground(Color.white);
        g3D = panel3D.getGraphics();       
        draw3DCoordinate();
    }
    
    public void draw3DCoordinate()
    {
        height = panel3D.getBounds().height; // Lay chieu cao cua Panel
        width = panel3D.getBounds().width; // Lay chieu dai cua Panel
        
        g3D.setColor(Color.BLACK);
        g3D.drawLine(width/2, height/2, width, height/2); // Ve truc Ox
        g3D.drawLine(width/2, 0, width/2, height/2); // Ve truc Oz       
        g3D.drawLine(width/2, height/2, 0, width/2 + height/2); // Ve truc Oy

        int x1 = 4;
        for (int i = 0 ; i <= width/2; i++)
        {
            if (i % (3*x1) == 2*x1)
            {
                g3D.drawLine(i, height/2, i - 2*x1, height/2); // Ox'
            }
        }
        for (int i = height + 1 ; i >= height/2; i--)
        {
            int x = height - i;
            if (x % (3*x1) == 2*x1)
            {
                g3D.drawLine(width/2, i, width/2, i - 2*x1); // Oy'
            }
        }        
        for (int i = width/2 ; i <= width; i++)
        {
            int x = i - width/2;
            if (x % (3*x1) == 2*x1)
            {
                g3D.drawLine(i, height/2 - x, i - 2*x1, height/2 - (x - 2*x1)); // Oz'
            }
        }        
        
//        int inc = 1; // Don vi duong
//        int desc = -1; // Don vi am        
//        for (int i = 0; i < width; i += step) 
//        {
//            g3D.setColor(Color.BLACK);
//            g3D.drawLine(width/2 + i, height/2 - 2, width/2 + i, height/2 + 2); // Ve cac gach cua Ox
//            g3D.drawLine(width/2 - i, height/2 - 2, width/2 - i, height/2 + 2); // Ve cac gach cua Ox'
//            g3D.drawLine(width/2 - 2, height/2 - i, width/2 + 2, height/2 - i); // Ve cac gach cua Oy
//            g3D.drawLine(width/2 - 2, height/2 + i, width/2 + 2, height/2 + i); // Ve cac gach cua Oy'
//            
//            
//            g3D.setColor(Color.BLUE);
//            g3D.drawString(String.valueOf(inc), width/2 + i + step - 3, height/2 + 15); // Danh so don vi cho Ox
//            g3D.drawString(String.valueOf(desc), width/2 - i - step - 7, height/2 + 15); // Danh so don vi cho Ox'
//            g3D.drawString(String.valueOf(inc), width/2 - 15, height/2 - i - step + 5); // Danh so don vi cho Oy
//            g3D.drawString(String.valueOf(desc), width/2 - 15, height/2 + i + step + 5); // Danh so don vi cho Oy'
//            
//            inc++;
//            desc--;         
//        }    
        g3D.setColor(Color.blue);
        g3D.drawString("x", width - 20, height/2 - 10);
        g3D.drawString("z", width/2 + 10, 0 + 10);
        g3D.drawString("O", width/2 - 15, height/2 + 15);      
        g3D.drawString("y", width/4 - 25, height - 5);
    }
    
    
    // De khong bi mat do thi khi zoom len hay di chuyen frame
    @Override
    public void paint(Graphics g) 
    {
        super.paint(g);
        draw3DCoordinate();
    }
        
    public void putPixel(double x, double y)
    {       
        Graphics2D g1 = (Graphics2D) g3D.create();
        g1.setColor(Color.BLACK);
        g1.fillRect((int)x, (int)y, 3,3);       
    }    
    
    public void putPixel3D(double x, double y)
    {       
        Graphics2D g1 = (Graphics2D) g3D.create();
        g1.setColor(Color.RED);
        
        // Dua ve tam toa do roi tu do moi tinh toan de put pixel
        double newX = x*step + width/2;
        double newY = height/2 - y*step;
                
        g1.fillRect((int)newX, (int)newY, 4, 4);       
    }  
    
    public void putText3D(String tenDiem, int x, int y, int z)
    {
        Graphics2D g1 = (Graphics2D) g3D.create();
        
        double newX, newY;  
        newX =  cavalierProjection(x, y)*step + width/2; 
        newY = height/2 - cavalierProjection(z, y)*step; 
               
        g1.setColor(Color.black);
        g1.drawString(tenDiem + "(" + x + "," + y + "," + z + ")",(int)newX + 5,(int)newY + 10);
    }        
    
    public double cavalierProjection(double a, double b)
    {
        // Chieu len truc Oxz
        return a - b*(1 - Math.sqrt(2)/2);
    }      
    
    public void drawGrid()
    {
        g3D.setColor(Color.black);
        
        // Luoi doc
        for (int x = 0; x < width; x += step)
        {
            g3D.drawLine(x, 0, x, height);
        }

        // Luoi ngang
        for (int y = 0; y < height; y += step)
        {
            g3D.drawLine(0, y, width, y);
        }
    }

    public void drawLineDDA(double x1, double y1, double x2, double y2)
    {   
        // Dua ve tam toa do
        x1 = x1*this.step + width/2;
        y1 = height/2 - y1*this.step;        
        x2 = x2*this.step + width/2;
        y2 = height/2 - y2*this.step;           
        
        double dx = x2 - x1;
        double dy = y2 - y1;  
        double step;
        if(Math.abs(dx) >= Math.abs(dy))
        {
            step = Math.abs(dx);
        } 
        else
        {
            step = Math.abs(dy);
        }
        double x_inc = dx/step;
        double y_inc = dy/step;
        
        double x = x1;
        double y = y1;
        putPixel(x, y);

        for (int i = 0; i <= step; i++)
        {
            x = x + x_inc;
            y = y + y_inc;
            putPixel(Math.round(x), Math.round(y));
        }
    }
   
    public void drawDashedLineDDA(double x1, double y1, double x2, double y2)
    {   
        // Dua ve tam toa do
        x1 = x1*this.step + width/2;
        y1 = height/2 - y1*this.step;        
        x2 = x2*this.step + width/2;
        y2 = height/2 - y2*this.step;           
        
        double dx = x2 - x1;
        double dy = y2 - y1;  
        double step;
        if(Math.abs(dx) >= Math.abs(dy))
        {
            step = Math.abs(dx);
        } 
        else
        {
            step = Math.abs(dy);
        }
        double x_inc = dx/step;
        double y_inc = dy/step;
        
        double x = x1;
        double y = y1;
        putPixel(x, y);

        // Dem so pixel da put. Khi dat den 1 so luong nhat dinh thi ngung khong put nua
        int count = 0;
        for (int i = 0; i <= step; i++)
        {
            count++;
            if (count <= 10) // put 10 pixel
            {
                putPixel(Math.round(x), Math.round(y));
                x = x + x_inc;
                y = y + y_inc;
            }
            else if (count >= 11 && count <= 15) // 5 pixel tiep theo khong put
            {
                x = x + x_inc;
                y = y + y_inc;
                if (count == 15)
                {
                    count = 0; // Lap lai viec put pixel
                }
            }
        }
    }
    
    public void drawDDAWithCondition(double x1, double y1, double x2, double y2, String circumstance)
    {
        if (circumstance.equals("Straight"))
        {
            if (x1 > x2)
            {
                drawLineDDA(x2, y2, x1, y1);
            }
            else
            {
               drawLineDDA(x1, y1, x2, y2);
            }        
        }
        else if (circumstance.equals("Dashed"))
        {
            if (x1 > x2)
            {
                drawDashedLineDDA(x2, y2, x1, y1);
            }
            else
            {
                drawDashedLineDDA(x1, y1, x2, y2);
            }                 
        }
    }
    
    public void drawRectangular()
    {
        // A
        double xA = Double.valueOf(dai_TF.getText());
        double yA = 0;
        double zA = 0;
        
        double xA1 = cavalierProjection(xA, yA);
        double yA1 = cavalierProjection(zA, yA);
        
        // B
        double xB = Double.valueOf(dai_TF.getText());
        double yB = Double.valueOf(rong_TF.getText());
        double zB = 0;
        
        double xB1 = cavalierProjection(xB, yB);
        double yB1 = cavalierProjection(zB, yB);
        
        // C
        double xC = 0;
        double yC = Double.valueOf(rong_TF.getText());
        double zC = 0;
        
        double xC1 = cavalierProjection(xC, yC);
        double yC1 = cavalierProjection(zC, yC);
        
        // D
        double xD = Double.valueOf(dai_TF.getText());
        double yD = 0;
        double zD = Double.valueOf(cao_TF.getText());
        
        double xD1 = cavalierProjection(xD, yD);
        double yD1 = cavalierProjection(zD, yD);    
        
        // E 
        double xE = 0;
        double yE = 0;
        double zE = Double.valueOf(cao_TF.getText());
        
        double xE1 = cavalierProjection(xE, yE);
        double yE1 = cavalierProjection(zE, yE);    
        
        // F
        double xF = 0;
        double yF = Double.valueOf(rong_TF.getText());
        double zF = Double.valueOf(cao_TF.getText());
        
        double xF1 = cavalierProjection(xF, yF);
        double yF1 = cavalierProjection(zF, yF);      
        
        // G
        double xG = Double.valueOf(dai_TF.getText());
        double yG = Double.valueOf(rong_TF.getText());
        double zG = Double.valueOf(cao_TF.getText());
        
        double xG1 = cavalierProjection(xG, yG);
        double yG1 = cavalierProjection(zG, yG);        
           
        putPixel3D(xA1, yA1);
        putPixel3D(xB1, yB1);
        putPixel3D(xC1, yC1);
        putPixel3D(xD1, yD1);
        putPixel3D(xE1, yE1);
        putPixel3D(xF1, yF1);
        putPixel3D(xG1, yG1);
        
        putText3D("A", (int)xA, (int)yA, (int)zA);        
        putText3D("B", (int)xB, (int)yB, (int)zB);   
        putText3D("C", (int)xC, (int)yC, (int)zC); 
        putText3D("D", (int)xD, (int)yD, (int)zD);
        putText3D("E", (int)xE, (int)yE, (int)zE);
        putText3D("F", (int)xF, (int)yF, (int)zF);
        putText3D("G", (int)xG, (int)yG, (int)zG); 
        
        drawDDAWithCondition(xA1, yA1, xB1, yB1, "Straight"); // AB
        drawDDAWithCondition(xA1, yA1, xD1, yD1, "Straight"); // AD
        drawDDAWithCondition(xB1, yB1, xC1, yC1, "Straight"); // BC
        drawDDAWithCondition(xB1, yB1, xG1, yG1, "Straight"); // BG       
        drawDDAWithCondition(xC1, yC1, xF1, yF1, "Straight"); // CF
        drawDDAWithCondition(xD1, yD1, xG1, yG1, "Straight"); // DG
        drawDDAWithCondition(xE1, yE1, xF1, yF1, "Straight"); // EF        
        drawDDAWithCondition(xE1, yE1, xD1, yD1, "Straight"); // ED        
        drawDDAWithCondition(xF1, yF1, xG1, yG1, "Straight"); // FG
        
        drawDDAWithCondition(0, 0, xC1, yC1, "Dashed"); // OC
        drawDDAWithCondition(0, 0, xA1, yA1, "Dashed"); // OA
        drawDDAWithCondition(0, 0, xE1, yE1, "Dashed"); // EO
    }  
}
